#! /usr/bin/perl

# $Header: Last edited: 27-Jun-2009 1.1 $ 
#
# Script to poke around the kernel to see what files or structs are
# available that we really want. Usually there in a later kernel, but
# may not be in an earlier one.
#
# 27-Jun-2009 PDF Add support for HAVE_STACKTRACE_OPS
# 24-Jul-2009 PDF Add support for FUNC_SMP_CALL_FUNCTION_SINGLE_5_ARGS
# 06-Jul-2010 PDF Add 'nonatomic' as a way to autodetect FUNC_SMP_CALL_FUNCTION_SINGLE_5_ARGS on Centos 5.5
# 15-Jul-2010 PDF Better parsing for SMP_CALL_FUNCTION_SINGLE_ARGS and SMP_CALL_FUNCTION_ARGS

use strict;
use warnings;

use File::Basename;
use FileHandle;
use Getopt::Long;
use IO::File;
use POSIX;

my $kern;

#######################################################################
#   Command line switches.					      #
#######################################################################
my %opts;

sub main
{
	Getopt::Long::Configure('no_ignore_case');
	usage() unless GetOptions(\%opts,
		'help',
		'v',
		);

	usage() if ($opts{help});
	usage() if !$ENV{BUILD_DIR};

	my $fname = "$ENV{BUILD_DIR}/port.h";
	my $build = $ENV{BUILD_DIR};
	$build =~ s/^build-//;
	my $inc = "";
	$kern = "/lib/modules/$build/build";
	foreach my $f (qw{
		include/linux/cred.h
		}) {
		my $val = 0;
		if (-f "$kern/$f") {
			$val = 1;
		}
#		print "$val $kern/$f\n";
		my $name = $f;
		$name =~ s/[\/.]/_/g;
		$name = uc($name);
		$inc .= "# define HAVE_$name $val\n";
	}

	###############################################
	#   Check for zlib functions in the kernel.   #
	###############################################
	my $str = `grep zlib /proc/kallsyms`;
	chomp($str);
	if ($str eq '') {
		$inc .= "# define DO_NOT_HAVE_ZLIB_IN_KERNEL 1\n";
	}

	if (have("stacktrace_ops", "include/asm/stacktrace.h") ||
	    have("stacktrace_ops", "arch/x86/include/asm/stacktrace.h")) {
		$inc .= "# define HAVE_STACKTRACE_OPS \n";
	}

	###############################################
	#   Check    for    smp_call_function_single  #
	#   having 4 or 5 args.			      #
	###############################################
	$inc .= smp_call_function_single();

	$inc = join("\n", sort(split("\n", $inc)));
	$inc = "/* This file is automatically generated via mkport.pl */\n" .
		"\n" .
		$inc . "\n";
	print $inc if $opts{v};
	###############################################
	#   Read old file.			      #
	###############################################
	my $fh = new FileHandle($fname);
	my $old = "";
	if ($fh) {
		while (<$fh>) {
			$old .= $_;
		}
		exit(0) if $old eq $inc;
	}

	if (! -d "$ENV{BUILD_DIR}") {
		mkdir("$ENV{BUILD_DIR}", 0755);
	}
	$fh = new FileHandle(">$ENV{BUILD_DIR}/port.h");
	die "Cannot create $ENV{BUILD_DIR}/port.h" if !$fh;
	print $fh $inc;
}
######################################################################
#   Grep a file to see if something is where we want it.	     #
######################################################################
sub have
{	my $name = shift;
	my $file = shift;

#print "opening .... $kern/$file\n";
	my $fh = new FileHandle("$kern/$file");
	if (!$fh && $opts{v}) {
		print "Cannot open $kern/$file\n";
	}
	return if !$fh;
	while (<$fh>) {
		return 1 if /$name/;
	}
}
######################################################################
#   Handle  funkyness  of smp_call_function_single - may/may not be  #
#   there, may have differing arguments.			     #
######################################################################
sub smp_call_function_single
{
	my $inc = "";

	my %hash;

	foreach my $smp_h ("asm/smp.h", "linux/smp.h") {
#print "opening ... $kern/include/$smp_h\n";
		my $fh = new FileHandle("$kern/include/$smp_h");
		next if !$fh;
		while (<$fh>) {
			next if /^#define/;
			if (/smp_call_function_single/) {
				my $line = <$fh>;
				###############################################
				#   Assume   both   smp_call_function()  and  #
				#   smp_call_function_single()     can    be  #
				#   handled with the same 'extra' parameter.  #
				#   Handles AS4.0 kernels.		      #
				###############################################
				if ($line =~ /retry|nonatomic/) {
					$hash{SMP_CALL_FUNCTION_SINGLE_ARGS} = 5;
				} else {
					$hash{SMP_CALL_FUNCTION_SINGLE_ARGS} = 4;
				}
				next;
			}
			if (/int\s+smp_call_function\(/) {
				chomp;
				$_ =~ s/[^,]//g;
				$hash{SMP_CALL_FUNCTION_ARGS} = length($_) + 1;
				next;
			}

		}
	}
	if (scalar(keys(%hash)) == 0) {
		return "# define FUNC_SMP_CALL_FUNCTION_SINGLE_MISSING 1\n";
	}
	foreach my $k (sort(keys(%hash))) {
		$inc .= "# define $k $hash{$k}\n";
	}
	return $inc;
}
#######################################################################
#   Print out command line usage.				      #
#######################################################################
sub usage
{
	print <<EOF;
mkport.pl: script to set up portability workarounds
Usage: BUILD_DIR=x.y.z mkport.pl

This script setups a file called "port.h" which is needed to determine
which features or include files are available on this kernel, so we can
detect at compile time what we need to work around.

Switches:

EOF

	exit(1);
}

main();
0;

